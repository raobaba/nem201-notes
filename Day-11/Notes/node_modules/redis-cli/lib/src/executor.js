"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorExecutor = exports.PatternSubscribeExecutor = exports.SubscribeExecutor = exports.BaseExecutor = exports.RequestEnd = exports.RedirectError = exports.ExecutorError = void 0;
const redis_1 = require("redis");
const util_1 = require("util");
require("core-js/stable/array/flat");
const INT_PREFIX = "(integer)";
const BLOCKING_CMDS = ["subscribe", "monitor", "psubscribe"];
const left = (err) => {
    return {
        _kind: 'Left',
        left: err
    };
};
const right = (res) => {
    return {
        _kind: 'Right',
        right: res
    };
};
class ExecutorError extends Error {
}
exports.ExecutorError = ExecutorError;
class RedirectError extends ExecutorError {
    constructor(commands, slot, hostAndPort, key) {
        super(`-> Redirected to slot [${slot}] located at ${hostAndPort}`);
        this.name = "RedirectError";
        this.commands = commands;
        this.key = key;
        this.slot = slot;
        this.hostAndPort = hostAndPort;
    }
}
exports.RedirectError = RedirectError;
class RequestEnd extends ExecutorError {
    constructor() {
        super("Request End");
        this.name = "RequestEnd";
    }
}
exports.RequestEnd = RequestEnd;
const REQ_END = new RequestEnd();
class BaseExecutor {
    constructor(client, commands) {
        // defensive clone 
        this.originCmds = Array.from(commands);
        ;
        this.client = client;
        this.commands = commands;
        this.cmd = this.commands.shift().toLowerCase();
        this.key = this.commands.length > 0 ? this.commands[0] : undefined;
        this.blockingMode = BLOCKING_CMDS.includes(this.cmd);
        this.executor = this.client[`${this.cmd}Async`];
        // For custom commands, for example, commands in custom modules
        if (typeof this.executor !== "function") {
            this.executor = this.client[`send_commandAsync`];
            // recombine commands
            this.commands = [this.cmd, this.commands];
        }
    }
    writeResult(result) {
        if (Array.isArray(result)) {
            return result.map((item, idx) => {
                if (Array.isArray(item)) {
                    return item.map((elem, jdx) => {
                        if (jdx === 0) {
                            return util_1.format(`%d) %d) %s`, idx + 1, jdx + 1, elem);
                        }
                        else {
                            return elem.map((val, kdx) => {
                                if (kdx == 0) {
                                    return util_1.format(`   %d) %d) "%s"`, jdx + 1, kdx + 1, val);
                                }
                                else {
                                    return util_1.format(`      %d) "%s"`, kdx + 1, val);
                                }
                            });
                        }
                    }).flat();
                }
                else {
                    return util_1.format("%d) %s", idx + 1, item);
                }
            }).flat();
        }
        else if (result === null) {
            return "(nil)";
        }
        else if (typeof result === 'object') {
            return Object.entries(result).flat().map((item, index) => {
                return `${index + 1}) "${item}"`;
            });
        }
        else {
            // number or string
            // default to print it as `string`
            return util_1.format(Number.isInteger(result) ? `${INT_PREFIX} ${result}` : result);
        }
    }
    run(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.executor.apply(this.client, this.commands);
                callback(right(this.writeResult(result)));
                if (!this.blockingMode)
                    callback(left(REQ_END));
            }
            catch (e) {
                if (e instanceof redis_1.ReplyError) {
                    if (e.code === "MOVED") {
                        const matched = e.message.match(/MOVED (\d+) ([\d\.:]+)/);
                        const slot = parseInt(matched[1]);
                        const newEndpoint = matched[2];
                        callback(left(new RedirectError(this.originCmds, slot, newEndpoint, this.key)));
                        return;
                    }
                    callback(left(e));
                }
                else if (e instanceof Error) {
                    callback(left(e));
                }
                else {
                    throw e;
                }
            }
        });
    }
    shutdown() {
        // do nothing
    }
    static of(client, commands) {
        const CMD = commands[0].toLowerCase();
        if (CMD === 'subscribe') {
            return new SubscribeExecutor(client, commands);
        }
        else if (CMD === 'psubscribe') {
            return new PatternSubscribeExecutor(client, commands);
        }
        else if (CMD === 'monitor') {
            return new MonitorExecutor(client, commands);
        }
        else {
            return new BaseExecutor(client, commands);
        }
    }
}
exports.BaseExecutor = BaseExecutor;
class SubscribeExecutor extends BaseExecutor {
    constructor(client, commands) {
        super(client, commands);
    }
    run(callback) {
        const _super = Object.create(null, {
            run: { get: () => super.run }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cmd === "subscribe") {
                this.client.on("subscribe", (_channel, _count) => { });
                this.client.on("message", (_channel, message) => {
                    callback(right(this.writeResult(message)));
                });
            }
            return _super.run.call(this, callback);
        });
    }
    shutdown() {
        this.client.unsubscribe();
    }
}
exports.SubscribeExecutor = SubscribeExecutor;
class PatternSubscribeExecutor extends SubscribeExecutor {
    constructor(client, commands) {
        super(client, commands);
    }
    run(callback) {
        const _super = Object.create(null, {
            run: { get: () => super.run }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.client.on("psubscribe", (_pattern, _count) => { });
            this.client.on("pmessage", (_pattern, _channel, message) => {
                callback(right(this.writeResult(message)));
            });
            return _super.run.call(this, callback);
        });
    }
}
exports.PatternSubscribeExecutor = PatternSubscribeExecutor;
class MonitorExecutor extends BaseExecutor {
    constructor(client, commands) {
        super(client, commands);
    }
    run(callback) {
        const _super = Object.create(null, {
            run: { get: () => super.run }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.client.on("monitor", (time, args, raw_reply) => {
                callback(right(this.writeResult(raw_reply)));
            });
            return _super.run.call(this, callback);
        });
    }
}
exports.MonitorExecutor = MonitorExecutor;
